// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  SELLER
  CUSTOMER
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  password      String?
  role          Role      @default(CUSTOMER)
  isTwoFactorEnabled Boolean @default(false)
  twoFactorSecret   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  orders        Order[]
  seller        Seller?
}

model Seller {
  id          String   @id @default(uuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  storeName   String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  products    Product[]
  orders      Order[]
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String?
  price       Float
  stock       Int      @default(0)
  sellerId    String
  seller      Seller   @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  category    String?
  images      String[] // URLs das imagens no S3
  variations  Json?    // Para variações como tamanho, cor, etc.
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  orderItems  OrderItem[]
}

model Order {
  id          String      @id @default(uuid())
  customerId  String
  customer    User        @relation(fields: [customerId], references: [id], onDelete: Cascade)
  sellerId    String
  seller      Seller      @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  status      OrderStatus @default(PENDING)
  totalAmount Float
  shippingAddress Json
  paymentIntentId String? // Stripe payment intent ID
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  items       OrderItem[]
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int
  price     Float   // Preço no momento da compra
  createdAt DateTime @default(now())
}
